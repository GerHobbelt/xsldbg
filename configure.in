
AC_INIT(src/xsldbg.c)

timestamp='2001-12-02'


XSLDBG_MAJOR_VERSION=0
XSLDBG_MINOR_VERSION=8
XSLDBG_MICRO_VERSION=4
PACKAGE=xsldbg

LIBXML_REQUIRED_VERSION=2.4.10
LIBXSLT_REQUIRED_VERSION=1.0.8


XSLDBG_VERSION=$XSLDBG_MAJOR_VERSION.$XSLDBG_MINOR_VERSION.$XSLDBG_MICRO_VERSION
XSLDBG_VERSION_INFO=`expr $XSLDBG_MAJOR_VERSION + \
        $XSLDBG_MINOR_VERSION`:$XSLDBG_MICRO_VERSION:$XSLDBG_MICRO_VERSION

XSLDBG_VERSION_NUMBER=`expr $XSLDBG_MAJOR_VERSION \* 10000 + \
        $XSLDBG_MINOR_VERSION \* 100 + $XSLDBG_MICRO_VERSION`
AC_SUBST(XSLDBG_MAJOR_VERSION)
AC_SUBST(XSLDBG_MINOR_VERSION)
AC_SUBST(XSLDBG_MICRO_VERSION)
AC_SUBST(XSLDBG_VERSION)
AC_SUBST(XSLDBG_VERSION_INFO)
AC_SUBST(XSLDBG_VERSION_NUMBER)

VERSION=${XSLDBG_VERSION}
AC_SUBST(VERSION)

dnl enable the following if you want to use autoconf/automake
dnl framework from a certain directory (like kde-common)
dnl AC_CONFIG_AUX_DIR(admin)

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH path to installed docs ])

dnl
dnl Specific dir for HTML output ?
dnl

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='$(prefix)/doc'
else
  HTML_DIR=$with_html_dir
fi
AC_SUBST(HTML_DIR)



AC_PREFIX_DEFAULT(/usr/local)
if test "x$prefix" = "xNONE"; then
   prefix=$ac_default_prefix
  ac_configure_args="$ac_configure_args --prefix $prefix"
fi

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(xsldbg, ${VERSION})
AM_MAINTAINER_MODE
AC_DEFINE_UNQUOTED(TIMESTAMP, "$timestamp")

AC_LANG_C
AC_PROG_CC
AM_PROG_LIBTOOL

dnl
dnl Math detection
dnl

AC_CHECK_HEADERS(sys/types.h sys/time.h stdlib.h unistd.h string.h)
AC_CHECK_HEADERS(ieeefp.h nan.h math.h fp_class.h float.h ansidecl.h)
AC_CHECK_HEADERS(time.h sys/stat.h stdarg.h)
AC_CHECK_FUNCS(stat _stat)

AC_CHECK_FUNC(isnan, , AC_CHECK_LIB(m, isnan,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_ISNAN)]))

AC_CHECK_FUNC(isinf, , AC_CHECK_LIB(m, isinf,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_ISINF)]))

AC_CHECK_FUNC(pow, , AC_CHECK_LIB(m, pow,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_POW)]))

AC_CHECK_FUNC(floor, , AC_CHECK_LIB(m, pow,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_FLOOR)]))

AC_CHECK_FUNC(fabs, , AC_CHECK_LIB(m, pow,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_FABS)]))
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(mktime localtime asctime)

dnl
dnl Do we have a usleep function, need by the walk command
dnl
dnl AC_CHECK_FUNC(usleep, , AC_CHECK_LIB(c, usleep,
dnl	AC_DEFINE(HAVE_SLEEP)))
AC_CHECK_FUNCS(usleep)

dnl
dnl Perl is just needed for testing
dnl

AC_CHECK_PROG(PERL, perl, perl, false)
AM_CONDITIONAL(WITH_PERL, test "$PERL" != "false")


AC_ARG_WITH(debug, [  --with-debug            Add the debugging code (on)])
if test "$with_debug" = "no" ; then
    echo Disabling debug support
else
    echo Enabling debug support
    AC_DEFINE(WITH_XSLDBG_DEBUG)
fi


AC_ARG_WITH(mem_debug,
	[  --with-mem-debug      Add the memory debugging module (off)])
if test "$with_mem_debug" = "yes" ; then
    echo Enabling memory debug support
    WITH_MEM_DEBUG=1
else
    WITH_MEM_DEBUG=0
fi
AC_SUBST(WITH_MEM_DEBUG)


dnl 
dnl Do we generate KDE style help documention ?
dnl

AC_ARG_ENABLE(kde_docs,
	[  --enable-kde-docs    Turn on generation of kde style documentation],
	[case "${enableval}" in
	yes) kde_docs=true 
		AC_MSG_RESULT(Enabling kde style documentation);;
	no)  kde_docs=false 
		AC_MSG_RESULT(Disabling kde style documentation);;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-kde-docs) ;;
	esac],[kde_docs=false])
AM_CONDITIONAL(USE_KDEDOCS, test x$kde_docs = xtrue)

dnl 
dnl Do we generate GNOME style help documention ?
dnl

AC_ARG_ENABLE(gnome_docs,
	[  --enable-gnome-docs    Turn on generation of gnome style documentation],
	[case "${enableval}" in
	yes) gnome_html=true 
		AC_MSG_RESULT(Enabling gnome style documentation);;
	no)  gnome_docs=false 
		AC_MSG_RESULT(Disabling gnome style documentation);;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-gnome-docs) ;;
	esac],[gnome_docs=false])
AM_CONDITIONAL(USE_GNOMEDOCS, test x$gnome_docs = xtrue)


dnl
dnl Do you want to use the help system
dnl

AC_ARG_WITH(helpsystem, [  --with-helpsystem            Enable the help system (on)])
if test "$with_helpsystem" = "no" ; then
    echo Disabling help system
    WITH_DEBUG_HELP=0
else
    echo Enabling help system 
    AC_DEFINE(WITH_DEBUG_HELP)
    WITH_DEBUG_HELP=1
fi


dnl No internationalization (yet ?)
dnl
dnl ALL_LINGUAS="it ko fr de es no ga sv pt ja fi cs"
dnl AM_GNU_GETTEXT
dnl
dnl AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


dnl
dnl The following new parameters were added to offer
dnl the ability to specify the location of the libxml
dnl library during linking and compilation.
dnl Mathieu Lacage 30/03/2000
dnl
LIBXML_PREFIX=""
AC_ARG_WITH(libxml-prefix,
        [  --with-libxml-prefix=[PFX]		Specify location of libxml],
	 LIBXML_PREFIX="$withval"
)

AC_SUBST(LIBXML_LIBS)


dnl
dnl find libxml
dnl
XML_CONFIG="xml2-config"
AC_SUBST(LIBXML_REQUIRED_VERSION)
AC_MSG_CHECKING(for libxml libraries >= $LIBXML_REQUIRED_VERSION)
if test "x$LIBXML_PREFIX" != "x"
then
	if ${LIBXML_PREFIX}/bin/xml2-config --libs print > /dev/null 2>&1
	then
		XML_CONFIG=${LIBXML_PREFIX}/bin/xml2-config
	else
		XML_CONFIG=xml2-config
	fi
fi

AC_DEFUN(VERSION_TO_NUMBER,
[`$1 | sed -e 's/libxml //' | awk 'BEGIN { FS = "."; } { printf "%d",
 ([$]1* 1000 + [$]2) * 1000 + [$]3;}'`])

dnl
dnl test version and init our variables
dnl
if test "x$XML_CONFIG" != "x"
then
	vers=VERSION_TO_NUMBER($XML_CONFIG --version)
	if test "$vers" -ge VERSION_TO_NUMBER(echo $LIBXML_REQUIRED_VERSION)
	then
		LIBXML_LIBS="`$XML_CONFIG --libs`"
		LIBXML_CFLAGS="`$XML_CONFIG --cflags`"
		AC_MSG_RESULT(found)
	else
		AC_MSG_ERROR(You need at least libxml2 $LIBXML_REQUIRED_VERSION for this
 version of xsldbg)
	fi
else
	AC_MSG_ERROR(Could not find libxml2 anywhere, check ftp://xmlsoft.org/.)
fi

AC_SUBST(XML_CONFIG)
AC_SUBST(LIBXML_PREFIX)
AC_SUBST(LIBXML_LIBS)
AC_SUBST(LIBXML_CFLAGS)

LIBXSLT_PREFIX=""
AC_ARG_WITH(libxslt-prefix,
        [  --with-libxslt-prefix=[PFX]		Specify location of libxslt],
	 LIBXSLT_PREFIX="$withval"
)

dnl
dnl find libxslt
dnl
XSLT_CONFIG="xslt-config"
AC_SUBST(LIBXSLT_REQUIRED_VERSION)
AC_MSG_CHECKING(for libxslt libraries >= $LIBXSLT_REQUIRED_VERSION)
if test "x$LIBXSLT_PREFIX" != "x"
then
	if ${LIBXSLT_PREFIX}/bin/xslt-config --libs print > /dev/null 2>&1
	then
		XSLT_CONFIG=${LIBXSLT_PREFIX}/bin/xslt-config
	else
		XSLT_CONFIG=xslt-config
	fi
fi

AC_DEFUN(VERSION_TO_NUMBER,
[`$1 | sed -e 's/libxslt //' | awk 'BEGIN { FS = "."; } { printf "%d",
 ([$]1  * 1000 + [$]2) * 1000 + [$]3;}'`])

dnl
dnl test version and init our variables
dnl
if test "x$XSLT_CONFIG" != "x"
then
	vers=VERSION_TO_NUMBER($XSLT_CONFIG --version)
	if test "$vers" -ge VERSION_TO_NUMBER(echo $LIBXSLT_REQUIRED_VERSION)
	then		
		LIBXSLT_LIBS="`$XSLT_CONFIG --libs`"
		LIBXSLT_CFLAGS="`$XSLT_CONFIG --cflags`"
		AC_MSG_RESULT(found)
	else
		AC_MSG_ERROR(You need at least libxslt $LIBXSLT_REQUIRED_VERSION for this
  version of xsldbg)
	fi
else
	AC_MSG_ERROR(Could not find libxslt anywhere, check
 ftp://xmlsoft.org/XSLT/.) fi



AC_SUBST(XSLT_CONFIG)
AC_SUBST(LIBXSLT_PREFIX)
AC_SUBST(LIBXSLT_LIBS)
AC_SUBST(LIBXSLT_CFLAGS)


XSLDBG_LIBDIR='-L${libdir}'
XSLDBG_INCLUDEDIR='-I${includedir}'
# EXTRA_LIBS=""
XSLDBG_LIBS="$LIBXML_LIBS -lexslt $LIBXSLT_LIBS $M_LIBS"


dnl
dnl Check for readline and history
dnl
AC_CHECK_HEADER(readline/readline.h, [
	AC_DEFINE(HAVE_READLINE)
	XSLDBG_LIBS="$XSLDBG_LIBS -lreadline -lncurses"])
AC_CHECK_HEADER(readline/history.h, [
	AC_DEFINE(HAVE_HISTORY)
	XSLDBG_LIBS="$XSLDBG_LIBS -lhistory"])

AC_SUBST(XSLDBG_LIBDIR)
AC_SUBST(XSLDBG_INCLUDEDIR)
AC_SUBST(EXTRA_LIBS)
AC_SUBST(XSLDBG_LIBS)



dnl
dnl Check for debug support in libxslt
dnl
dnl if test "x`$XSLT_CONFIG --libs | grep breakpoint`" != "x"
dnl then
dnl    AC_MSG_RESULT(Found debugger support in libxslt)
    WITH_DEBUGGER=1
    AC_DEFINE(WITH_DEBUGGER)
dnl else
dnl    AC_ERROR(Debugger support not built into libxslt use --with-debugger=yes as option when configuring libxslt)
dnl fi


AC_OUTPUT(
        Makefile     	
        src/Makefile  	
	tests/Makefile	
	results/Makefile 	
	docs/Makefile  		
	docs/en/Makefile	
	docs/en/plain/Makefile	
	docs/en/KDE/Makefile	
	docs/en/GNOME/Makefile		
	docs/en/website/Makefile 	
	) 



# Local variables:
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "timestamp='"
# time-stamp-format: "%:y-%02m-%02d"
# time-stamp-end: "'"
# End:
