
AC_INIT(src/main.c)

timestamp='2002-01-27'


XSLDBG_MAJOR_VERSION=1
XSLDBG_MINOR_VERSION=0
XSLDBG_MICRO_VERSION=1
PACKAGE=xsldbg

dnl
dnl how are we to invoke ourself, or the other stylesheet processor (xsltproc?) 
dnl

AC_DEFINE(XSLDBG_BIN, "xsldbg")

LIBXML_REQUIRED_VERSION=2.4.12
LIBXSLT_REQUIRED_VERSION=1.0.9


XSLDBG_VERSION=$XSLDBG_MAJOR_VERSION.$XSLDBG_MINOR_VERSION.$XSLDBG_MICRO_VERSION
XSLDBG_VERSION_INFO=`expr $XSLDBG_MAJOR_VERSION + \
        $XSLDBG_MINOR_VERSION`:$XSLDBG_MICRO_VERSION:$XSLDBG_MICRO_VERSION

XSLDBG_VERSION_NUMBER=`expr $XSLDBG_MAJOR_VERSION \* 10000 + \
        $XSLDBG_MINOR_VERSION \* 100 + $XSLDBG_MICRO_VERSION`
AC_SUBST(XSLDBG_MAJOR_VERSION)
AC_SUBST(XSLDBG_MINOR_VERSION)
AC_SUBST(XSLDBG_MICRO_VERSION)
AC_SUBST(XSLDBG_VERSION)
AC_SUBST(XSLDBG_VERSION_INFO)
AC_SUBST(XSLDBG_VERSION_NUMBER)

VERSION=${XSLDBG_VERSION}
AC_SUBST(VERSION)

dnl enable the following if you want to use autoconf/automake
dnl framework from a certain directory (like kde-common)
dnl AC_CONFIG_AUX_DIR(admin)

AC_PREFIX_DEFAULT(/usr/local)
if test "x$prefix" = "xNONE"; then
   prefix=$ac_default_prefix
  ac_configure_args="$ac_configure_args --prefix $prefix"
fi


AC_ARG_WITH(html-dir, [  --with-html-dir=PATH path to installed docs ])

dnl
dnl Specific dir for HTML output ?
dnl

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='$(prefix)/doc'
else
  HTML_DIR=$with_html_dir
fi
AC_SUBST(HTML_DIR)


AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(xsldbg, ${VERSION})
AM_MAINTAINER_MODE
AC_DEFINE_UNQUOTED(TIMESTAMP, "$timestamp")
AC_SUBST(TIMESTAMP)
 
AC_LANG_C
AC_PROG_CC
AC_PROG_CXX
AM_PROG_LIBTOOL

dnl
dnl Math detection
dnl

AC_CHECK_HEADERS(sys/types.h sys/time.h stdlib.h unistd.h string.h)
AC_CHECK_HEADERS(ieeefp.h nan.h math.h fp_class.h float.h ansidecl.h)
AC_CHECK_HEADERS(time.h sys/stat.h stdarg.h)
AC_CHECK_FUNCS(stat _stat)

AC_CHECK_FUNC(isnan, , AC_CHECK_LIB(m, isnan,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_ISNAN)]))

AC_CHECK_FUNC(isinf, , AC_CHECK_LIB(m, isinf,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_ISINF)]))

AC_CHECK_FUNC(pow, , AC_CHECK_LIB(m, pow,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_POW)]))

AC_CHECK_FUNC(floor, , AC_CHECK_LIB(m, pow,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_FLOOR)]))

AC_CHECK_FUNC(fabs, , AC_CHECK_LIB(m, pow,
  [M_LIBS="-lm"; AC_DEFINE(HAVE_FABS)]))
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(mktime localtime asctime)

dnl
dnl Do we have a usleep function, need by the walk command
dnl
dnl AC_CHECK_FUNC(usleep, , AC_CHECK_LIB(c, usleep,
dnl	AC_DEFINE(HAVE_SLEEP)))
AC_CHECK_FUNCS(usleep)

dnl
dnl Perl is just needed for testing
dnl

AC_CHECK_PROG(PERL, perl, perl, false)
AM_CONDITIONAL(WITH_PERL, test "$PERL" != "false")


AC_ARG_WITH(debug, [  --with-debug            Add the debugging code (on)])
if test "$with_debug" = "no" ; then
    echo Disabling debug support
else
    echo Enabling debug support
    AC_DEFINE(WITH_XSLDBG_DEBUG)
fi


AC_ARG_WITH(mem_debug,
	[  --with-mem-debug        Add the memory debugging module (off)])
if test "$with_mem_debug" = "yes" ; then
    echo Enabling memory debug support
    WITH_MEM_DEBUG=1
else
    WITH_MEM_DEBUG=0
fi
AC_SUBST(WITH_MEM_DEBUG)


dnl 
dnl Do we use a compiler macro to specify where documentation is
dnl

docs_macro=true
AC_ARG_ENABLE(docs_macro,
	[  --enable-docs-macro      Use a compiler macro to specify where documentation is (PREFIX/doc/xsldbg/) ],
	if test "${enableval}" = "no"
	then
		docs_macro=false
		AC_MSG_RESULT(Disabling the use of a compiler macro to specify where documention is.)
	fi
)
if test "x$docs_macro" = "xtrue"
then
 AC_DEFINE(USE_DOCS_MACRO, 1)
 if test "x$prefix" != "x"
 then
   AC_MSG_RESULT(xsldbg will look for installed documentation in ${prefix}/doc/xsldbg)
 else
   AC_MSG_RESULT(xsldbg will look for installed documentation in ${ac_default_prefix}doc/xsldbg/)
 fi	
else
 AC_MSG_RESULT(

 !!Warning!! Using a environment variable for specifiying location of documentation. 
     On non risc os systems :  XSLDBG_DOCS_DIR
     On risc os systems : XSLDebugDocs\$Dir
 See --enable-docs-macro in ./configure
)
fi


dnl 
dnl Do we generate KDE style help documention ?
dnl

AC_ARG_ENABLE(kde_docs,
	[  --enable-kde-docs       Turn on generation of kde style documentation (off)],
	[case "${enableval}" in
	yes) kde_docs=true 
		if test "x$gnome_docs" = "xtrue"
		then
	  	   AC_MSG_ERROR(Sorry!. Can only generate one style of documentation at a time.)
		fi
		AC_MSG_RESULT(Enabling KDE style documentation);;
	no)  kde_docs=false 
		AC_MSG_RESULT(Disabling KDE style documentation);;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-kde-docs) ;;
	esac],[kde_docs=false])
AM_CONDITIONAL(USE_KDEDOCS, test "x$kde_docs" = "xtrue")

dnl 
dnl Do we generate GNOME style help documention ?
dnl

AC_ARG_ENABLE(gnome_docs,
	[  --enable-gnome-docs     Turn on generation of gnome style documentation (off)],
	[case "${enableval}" in
	yes) gnome_docs=true 
		if test "x$kde_docs" = "xtrue"
		then
	  	   AC_MSG_ERROR(Sorry!. Can only generate one style of documentation at a time.)
		fi
		AC_MSG_RESULT(Enabling GNOME style documentation);;
	no)  gnome_docs=false 
		AC_MSG_RESULT(Disabling GNOME style documentation);;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-gnome-docs) ;;
	esac],[gnome_docs=false])
AM_CONDITIONAL(USE_GNOMEDOCS, test "x$gnome_docs" = "xtrue")

dnl
dnl Do you want to use the help system
dnl

AC_ARG_ENABLE(helpsystem, [  --enable-helpsystem     Enable the xsldbg help system (on)],
[if test "x${enableval}" = "xno" ; then
    AC_MSG_RESULT(Disabling the xsldbg help system)
    WITH_DEBUG_HELP=0
fi]
,
[
   AC_MSG_RESULT(Enabling the xsldbg help system)
    AC_DEFINE(WITH_DEBUG_HELP)
    WITH_DEBUG_HELP=1])

dnl
dnl Do you want to experiment with using xsldbg as a thread
dnl Warning will lead to alpha version of xsldbg
dnl

USE_XSLDBG_AS_THREAD=0
haveqt="false"
havepthread="false"
HAVE_QT=0
HAVE_PTHREAD=0
HAVE_GNOME=0
THREAD_LIBS=""
AC_ARG_ENABLE(xsldbgthread, 
[  --enable-xsldbgthread     Enable xsldbg as a thread (off)],
[case "${enableval}" in 
	yes) xsldbgthread="true"
       AC_MSG_RESULT(
!!Warning!!! Enabling xsldbg as a thread
)
	     AC_CHECK_HEADERS(pthread.h,
	     AC_DEFINE(HAVE_PTHREAD)
	     havepthread="true"
	     HAVE_PTHREAD=1
	    THREAD_LIBS=" -lpthread "
	    USE_XSLDBG_AS_THREAD=1
  	     AC_DEFINE(USE_XSLDBG_AS_THREAD),
	     AC_MSG_ERROR(PThread library not found))

	    AC_MSG_RESULT(Checking for QT library)
	    if test -f "${QTDIR}/include/qt.h"
	    then
		    AC_DEFINE(HAVE_QT)
		    haveqt="true"		
		    HAVE_QT=1
			  if test "x${HAVE_PTHREAD}" = "x0"
        then
				  THREAD_LIBS=" -lqt-mt "
   	      USE_XSLDBG_AS_THREAD=1
	        AC_DEFINE(USE_XSLDBG_AS_THREAD)
        fi
	      AC_MSG_RESULT(Ok)
	    else
	    	AC_MSG_ERROR("QT library not found")
      fi
			;;

	*) xsldbgthread="false";;
	esac],
	[ 
 AC_MSG_RESULT(Disabling xsldbg as a thread) 
  	  xsldbgthread="false"
	])

AC_SUBST(USE_XSLDBG_AS_THREAD)
AC_SUBST(THREAD_LIBS)
AM_CONDITIONAL(USE_XSLDBG_AS_THREAD, test "x${xsldbgthread}" = "xtrue")
AM_CONDITIONAL(HAVE_QT, test "x${haveqt}" = "xtrue")
AM_CONDITIONAL(HAVE_PTHREAD, test ="x${havepthread}" = "xtrue")
AC_SUBST(HAVE_QT)
AC_SUBST(HAVE_PTHREAD)
AC_SUBST(HAVE_GNOME)


dnl 
dnl Where is docbookx.dtd, needed only for generating GNOME docs  (can't assume user has GNOME2 with everything setup)
dnl

DOCBOOK_PREFIX="/usr/share/xml/docbook/"
AC_ARG_WITH(docbook-prefix, [  --with-docbook-prefix	         Set the prefix for docbook (/usr/share/xml/docbook)],
	DOCBOOK_PREFIX="$withval"	
)
AC_SUBST(DOCBOOK_PREFIX)

dnl
dnl What version of docbook needed only by GNOME docs
dnl

DOCBOOK_VERSION="4.1.2"
AC_ARG_WITH(docbook-version, [  --with-docbook-version 	 Set the version of docbook (4.1.2)],
	DOCBOOK_VERSION="$withval"
)
AC_SUBST(DOCBOOK_VERSION)


dnl No internationalization (yet ?)
dnl
dnl ALL_LINGUAS="it ko fr de es no ga sv pt ja fi cs"
dnl AM_GNU_GETTEXT
dnl
dnl AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


dnl
dnl The following new parameters were added to offer
dnl the ability to specify the location of the libxml
dnl library during linking and compilation.
dnl Mathieu Lacage 30/03/2000
dnl
LIBXML_PREFIX=""
AC_ARG_WITH(libxml-prefix,
        [  --with-libxml-prefix=[PFX]     Specify location of libxml],
	 LIBXML_PREFIX="$withval"
)

if test "x${LIBXML_PREFIX}" = "x"
then
  if test "x${prefix}" != "x"
  then
	LIBXML_PREFIX="${prefix}"
  fi	
fi

if test "x${LIBXML_PREFIX}" != "x"
then
  AC_MSG_RESULT(Using a libxml prefix of ${LIBXML_PREFIX})
fi


AC_SUBST(LIBXML_LIBS)


dnl
dnl find libxml
dnl
XML_CONFIG="xml2-config"
AC_SUBST(LIBXML_REQUIRED_VERSION)
AC_MSG_CHECKING(for libxml libraries >= $LIBXML_REQUIRED_VERSION)
XML_WARNING=""
if test "x$LIBXML_PREFIX" != "x"
then
	if ${LIBXML_PREFIX}/bin/xml2-config --libs print > /dev/null 2>&1
	then
		XML_CONFIG=${LIBXML_PREFIX}/bin/xml2-config
	else
	        XML_WARNING="1"
		XML_CONFIG=xml2-config
	fi
fi

AC_DEFUN(VERSION_TO_NUMBER,
[`$1 | sed -e 's/libxml //' | awk 'BEGIN { FS = "."; } { printf "%d",
 ([$]1* 1000 + [$]2) * 1000 + [$]3;}'`])

dnl
dnl test version and init our variables
dnl
if test "x$XML_CONFIG" != "x"
then
	vers=VERSION_TO_NUMBER($XML_CONFIG --version)
	if test "$vers" -ge VERSION_TO_NUMBER(echo $LIBXML_REQUIRED_VERSION)
	then
		LIBXML_LIBS="`$XML_CONFIG --libs`"
		LIBXML_CFLAGS="`$XML_CONFIG --cflags`"
		AC_MSG_RESULT(found)
	        if test "x$LIBXML_PREFIX" != "x"
	 	then
		   AC_MSG_RESULT(
Don't forget to make sure that ${LIBXML_PREFIX}/lib has been added 
	to your LD_LIBRARY_PATH environment variable)
	        fi		
	else
		AC_MSG_ERROR(You need at least libxml2 $LIBXML_REQUIRED_VERSION for this
 version of xsldbg)
	fi
else
	AC_MSG_ERROR(Could not find libxml2 anywhere, check ftp://xmlsoft.org/.)
fi

if test "x${XML_WARNING}" != "x"
then
   AC_MSG_RESULT(
!!Warning!! using xml2-config in default path
)
fi

LIBXML_PREFIX_DIR="`$XML_CONFIG --prefix`"

AC_SUBST(XML_CONFIG)
AC_SUBST(LIBXML_PREFIX)
AC_SUBST(LIBXML_LIBS)
AC_SUBST(LIBXML_CFLAGS)

LIBXSLT_PREFIX=""
AC_ARG_WITH(libxslt-prefix,
        [  --with-libxslt-prefix=[PFX]    Specify location of libxslt],
	 LIBXSLT_PREFIX="$withval"
)

if test "x${LIBXSLT_PREFIX}" = "x"
then
  if test "x${prefix}" != "x"
  then
	LIBXSLT_PREFIX="${prefix}"
  fi	
fi

if test "x${LIBXSLT_PREFIX}" != "x"
then
  AC_MSG_RESULT(Using a libxslt prefix of ${LIBXSLT_PREFIX})
fi

dnl
dnl find libxslt
dnl
XSLT_CONFIG="xslt-config"
XSLT_WARNING=""
AC_SUBST(LIBXSLT_REQUIRED_VERSION)
AC_MSG_CHECKING(for libxslt libraries >= $LIBXSLT_REQUIRED_VERSION)
if test "x$LIBXSLT_PREFIX" != "x"
then
	if ${LIBXSLT_PREFIX}/bin/xslt-config --libs print > /dev/null 2>&1
	then
		XSLT_CONFIG=${LIBXSLT_PREFIX}/bin/xslt-config
	else
	        XSLT_WARNING="1"
		XSLT_CONFIG=xslt-config
	fi
fi


AC_DEFUN(VERSION_TO_NUMBER,
[`$1 | sed -e 's/libxslt //' | awk 'BEGIN { FS = "."; } { printf "%d",
 ([$]1  * 1000 + [$]2) * 1000 + [$]3;}'`])

dnl
dnl test version and init our variables
dnl
if test "x$XSLT_CONFIG" != "x"
then
	vers=VERSION_TO_NUMBER($XSLT_CONFIG --version)
	if test "$vers" -ge VERSION_TO_NUMBER(echo $LIBXSLT_REQUIRED_VERSION)
	then		
		LIBXSLT_LIBS="`$XSLT_CONFIG --libs`"
		LIBXSLT_CFLAGS="`$XSLT_CONFIG --cflags`"
		AC_MSG_RESULT(found)
	else
		AC_MSG_ERROR(You need at least libxslt $LIBXSLT_REQUIRED_VERSION for this
  version of xsldbg)
	fi
else
	AC_MSG_ERROR(Could not find libxslt anywhere, check
 ftp://xmlsoft.org/XSLT/.) 
fi

if test "x${XSLT_WARNING}" != "x"
then
   AC_MSG_RESULT(
!!Warning!! using xslt-config in default path
)
fi

AC_SUBST(XSLT_CONFIG)
AC_SUBST(LIBXSLT_PREFIX)
AC_SUBST(LIBXSLT_LIBS)
AC_SUBST(LIBXSLT_CFLAGS)


XSLDBG_LIBDIR="${prefix}/lib"
XSLDBG_INCLUDEDIR="-I${prefix}/include"
# EXTRA_LIBS=""
XSLDBG_LIBS=" -L${XSLDBG_LIBDIR} -lxsldbg ${LIBXSLT_LIBS} -lexslt"

dnl
dnl Do we have we fix for included xml files
dnl

AC_CHECK_LIB(xml2, xmlSetEntityReferenceFunc,	
  [AC_DEFINE(HAVE_INCLUDE_FIX)],
  [AC_MSG_RESULT(
!!Warning!!  The version of libxml2 installed does not support 
	debugging of files included as entities. See --enable-includefix
)])

AC_ARG_ENABLE(includefix, [  --enable-includefix   Do you want to force the use of include fix (no)],
	[if test "x${enableval}" = "xyes" 
	then
	    AC_DEFINE(HAVE_INCLUDE_FIX)
	    AC_MSG_RESULT(Forcing the use if include fix)	
	fi])


dnl
dnl Check for readline and history
dnl
AC_CHECK_HEADERS(readline/readline.h, [
	AC_DEFINE(HAVE_READLINE)
	XSLDBG_LIBS="$XSLDBG_LIBS -lreadline -lncurses"])
AC_CHECK_HEADER(readline/history.h, [
	AC_DEFINE(HAVE_HISTORY)
	XSLDBG_LIBS="$XSLDBG_LIBS -lhistory"])

AC_SUBST(XSLDBG_LIBDIR)
AC_SUBST(XSLDBG_INCLUDEDIR)
AC_SUBST(EXTRA_LIBS)
AC_SUBST(XSLDBG_LIBS)
XSLDBG_CFLAGS="${XSLDBG_INCLUDEDIR} ${LIBXSLT_CFLAGS} "
AC_SUBST(XSLDBG_CFLAGS)



dnl
dnl Check for debugger support in libxslt
dnl
LIBXSLT_PREFIX_DIR="`$XSLT_CONFIG --prefix`"
AC_MSG_RESULT(Looking for WITH_DEBUGGER enabled in ${LIBXSLT_PREFIX_DIR}/include/libxslt/xsltconfig.h)
if test "x$LIBXSLT_PREFIX_DIR" != "x"
then   	
   if test "x`grep \"#define.*WITH_XSLT_DEBUG\" ${LIBXSLT_PREFIX_DIR}/include/libxslt/xsltconfig.h`" != "x"
   then 
  	 AC_MSG_RESULT(Found debugger support in libxslt)
   	WITH_DEBUGGER=1	
   	AC_DEFINE(WITH_DEBUGGER)
   else
	AC_ERROR(Debugger support not built into libxslt use --with-debugger as option 
	when configuring libxslt)
   fi
   AC_MSG_RESULT(Don't forget to make sure that ${LIBXSLT_PREFIX_DIR}/lib has been added 
	to your LD_LIBRARY_PATH environment variable)
else
   AC_ERROR(Unable to find libxslt prefix directory, or load xsltconfig.h)
fi


dnl
dnl what environment variables must be exported for xsldbg to work?
dnl  We only LD_LIBRARY_PATH set at the moment
dnl  I assume that /bin/sh will be used to compile xsldbg
dnl

if test "x`ls -l /bin/sh | grep bash`" != "x" -o "x`ls -l /bin/sh | grep pdksh`" != "x"
then
  AC_MSG_RESULT(Noting values for required variables for the bash/pdksh shell)
  XSLDBG_EXPORTS="export LD_LIBRARY_PATH=`pwd`/src/libxsldbg/.libs:${LIBXSLT_PREFIX_DIR}/lib:${LIBXML_PREFIX_DIR}/lib:$LD_LIBRARY_PATH;"
else
  if test "x`ls -l /bin/sh | grep tcsh`" != "x"
  then
	AC_MSG_RESULT(Noting values for required variables for the tcsh shell)
  	XSLDBG_EXPORTS="setenv LD_LIBRARY_PATH=`pwd`/src/libxsldbg/.libs:${LIBXSLT_PREFIX_DIR}/lib:${LIBXML_PREFIX_DIR}/lib:$LD_LIBRARY_PATH;"
  else
	AC_MSG_RESULT(Warning!! Unable to set up exports needed by xsldbg. 
Tests may not be run nor documentation be built)
	XSLDBG_EXPORTS=""
  fi 	
fi	
AC_SUBST(XSLDBG_EXPORTS)

AC_OUTPUT(
        Makefile     	
        src/Makefile  	
	src/xsldbgwin32conf.h
	src/libxsldbg/xsldbgconfig.h
	xsldbg-config
	src/libxsldbg/Makefile
	src/libqtnotifier/Makefile
	tests/Makefile	
	results/Makefile 	
	docs/Makefile  		
	docs/en/Makefile	
	docs/en/plain/Makefile	
	docs/en/KDE/Makefile	
	docs/en/GNOME/Makefile		
	docs/en/website/Makefile 	
	) 



# Local variables:
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "timestamp='"
# time-stamp-format: "%:y-%02m-%02d"
# time-stamp-end: "'"
# End:
