# Makefile for xsldbg, specific for Windows, MSVC and NMAKE.
#
# Take a look at the beginning and modify the variables to suit your 
# environment. Having done that, you can do a
#
# nmake [all]     to build the debugger.
# nmake clean     to remove all compiler output files and return to a
#                 clean state.
# nmake rebuild   to rebuild everything from scratch. This basically does
#                 a 'nmake clean' and then a 'nmake all'.
# nmake install   to install the debugger.
#
# March 2002, Igor Zlatkovic <igor@stud.fh-frankfurt.de>

AUTOCONF = .\configure.txt

# If you cannot run the configuration script, which would take the burden of
# editing this file from your back, then remove the following line...
#!include $(AUTOCONF)
# ...and enable the following lines and adapt them to your environment.
BASEDIR = ..
LIBXSLDBG_SRCDIR = $(BASEDIR)\src\libxsldbg
XSLDBG_SRCDIR = $(BASEDIR)\src
BINDIR = binaries
DEBUG = 0
STATIC = 0
PREFIX = C:\home\igor
BINPREFIX = $(PREFIX)\bin
INCPREFIX = $(PREFIX)\include
LIBPREFIX = $(PREFIX)\lib
SOPREFIX = $(PREFIX)\lib
INCLUDE = $(INCLUDE);$(INCPREFIX)
LIB = $(LIB);$(LIBPREFIX) 


# There should never be a need to modify anything below this line.
# ----------------------------------------------------------------


# Names of various input and output components.
XSLDBG_NAME = xsldbg
XSLDBG_E = $(XSLDBG_NAME).exe
LIBXSLDBG_NAME = lib$(XSLDBG_NAME)
LIBXSLDBG_A = $(LIBXSLDBG_NAME)_a.lib

# Places where intermediate files produced by the compiler go
XSLDBG_INTDIR = $(XSLDBG_NAME).int
LIBXSLDBG_INTDIR = $(LIBXSLDBG_NAME).int

# The preprocessor and its options.
CPP = cl.exe /EP
CPPFLAGS = /nologo

# The compiler and its options.
CC = cl.exe
CFLAGS = /nologo /D "WIN32" /D "_WINDOWS" /D "_MBCS" /W3 /MD
CFLAGS = $(CFLAGS) /I$(XSLDBG_SRCDIR)

# The linker and its options.
LD = link.exe
LDFLAGS = /nologo
LDFLAGS = $(LDFLAGS) /LIBPATH:$(BINDIR)
LIBS =
!if "$(STATIC)" == "1"
LIBS = libxml2_a.lib libxslt_a.lib libexslt_a.lib iconv_a.lib wsock32.lib
!else
LIBS = libxml2.lib libxslt.lib libexslt.lib 
!endif

# The archiver and its options.
AR = lib.exe
ARFLAGS = /nologo

# Optimisation and debug symbols.
!if "$(DEBUG)" == "1"
CFLAGS = $(CFLAGS) /D "_DEBUG" /Od /Z7
LDFLAGS = $(LDFLAGS) /DEBUG
!else
CFLAGS = $(CFLAGS) /D "NDEBUG" /O2 
LDFLAGS = $(LDFLAGS)
!endif

# Libxslt object files.
XSLDBG_OBJS = $(XSLDBG_INTDIR)\main.obj \
	$(XSLDBG_INTDIR)\simpleio.obj

# Libexslt object files.
LIBXSLDBG_OBJS = $(LIBXSLDBG_INTDIR)\arraylist.obj \
	$(LIBXSLDBG_INTDIR)\breakpoint.obj \
	$(LIBXSLDBG_INTDIR)\breakpoint_cmds.obj \
	$(LIBXSLDBG_INTDIR)\callstack.obj \
	$(LIBXSLDBG_INTDIR)\debug.obj \
	$(LIBXSLDBG_INTDIR)\debugXSL.obj \
	$(LIBXSLDBG_INTDIR)\file_cmds.obj \
	$(LIBXSLDBG_INTDIR)\files.obj \
	$(LIBXSLDBG_INTDIR)\files_win32.obj \
	$(LIBXSLDBG_INTDIR)\help_win32.obj \
	$(LIBXSLDBG_INTDIR)\nodeview_cmds.obj \
	$(LIBXSLDBG_INTDIR)\option_cmds.obj \
	$(LIBXSLDBG_INTDIR)\options.obj \
	$(LIBXSLDBG_INTDIR)\options_win32.obj \
	$(LIBXSLDBG_INTDIR)\os_cmds.obj \
	$(LIBXSLDBG_INTDIR)\param_cmds.obj \
	$(LIBXSLDBG_INTDIR)\search.obj \
	$(LIBXSLDBG_INTDIR)\search_cmds.obj \
	$(LIBXSLDBG_INTDIR)\template_cmds.obj \
	$(LIBXSLDBG_INTDIR)\trace_cmds.obj \
	$(LIBXSLDBG_INTDIR)\utils.obj \
	$(LIBXSLDBG_INTDIR)\variable_cmds.obj \
	$(LIBXSLDBG_INTDIR)\xsldbg.obj \
	$(LIBXSLDBG_INTDIR)\xsldbgthread.obj

all : libxsldbg xsldbg

xsldbg : libxsldbg $(BINDIR)\$(XSLDBG_E)

libxsldbg : $(BINDIR)\$(LIBXSLDBG_A)

clean :
	if exist $(XSLDBG_INTDIR) rmdir /S /Q $(XSLDBG_INTDIR)
	if exist $(LIBXSLDBG_INTDIR) rmdir /S /Q $(LIBXSLDBG_INTDIR)
	if exist $(BINDIR) rmdir /S /Q $(BINDIR)

rebuild : clean all

# Creates the compiler output directory.
$(BINDIR) :
	if not exist $(BINDIR) mkdir $(BINDIR)


# Creates the intermediate directory.
$(XSLDBG_INTDIR) :
	if not exist $(XSLDBG_INTDIR) mkdir $(XSLDBG_INTDIR)

# An implicit rule for the compilation.
{$(XSLDBG_SRCDIR)}.c{$(XSLDBG_INTDIR)}.obj::
	$(CC) $(CFLAGS) /Fo$(XSLDBG_INTDIR)\ /c $<

# Compiles the source. Uses the implicit rule for commands.
$(XSLDBG_OBJS) : $(XSLDBG_INTDIR)

# Creates the executable.
$(BINDIR)\$(XSLDBG_E) : $(BINDIR) $(XSLDBG_OBJS) 
	$(LD) $(LDFLAGS) \
		/OUT:$(BINDIR)\$(XSLDBG_E) $(XSLDBG_OBJS) $(BINDIR)\$(LIBXSLDBG_A) $(LIBS)


# Creates the intermediate directory.
$(LIBXSLDBG_INTDIR) :
	if not exist $(LIBXSLDBG_INTDIR) mkdir $(LIBXSLDBG_INTDIR)

# An implicit rule for the compilation.
{$(LIBXSLDBG_SRCDIR)}.c{$(LIBXSLDBG_INTDIR)}.obj::
	$(CC) $(CFLAGS) /Fo$(LIBXSLDBG_INTDIR)\ /c $<

# Compiles the source. Uses the implicit rule for commands.
$(LIBXSLDBG_OBJS) : $(LIBXSLDBG_INTDIR)

# Creates the archive.
$(BINDIR)\$(LIBXSLDBG_A) : $(BINDIR) $(LIBXSLDBG_OBJS)
	$(AR) $(ARFLAGS) /OUT:$(BINDIR)\$(LIBXSLDBG_A) $(LIBXSLDBG_OBJS)


# Source dependences should be autogenerated somehow here, but how to
# do it? I have no clue.

